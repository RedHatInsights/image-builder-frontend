/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/popular_repositories/": {
    /**
     * List Popular Repositories 
     * @description Get popular repositories
     */
    get: operations["listPopularRepositories"];
  };
  "/repositories/": {
    /**
     * List Repositories 
     * @description list repositories
     */
    get: operations["listRepositories"];
    /**
     * Create Repository 
     * @description create a repository
     */
    post: operations["createRepository"];
  };
  "/repositories/bulk_create/": {
    /**
     * Bulk create repositories 
     * @description bulk create repositories
     */
    post: operations["bulkCreateRepositories"];
  };
  "/repositories/{uuid}": {
    /**
     * Get Repository 
     * @description Get information about a Repository
     */
    get: operations["getRepository"];
    /**
     * Update Repository 
     * @description Fully update a repository
     */
    put: operations["fullUpdateRepository"];
    /** Delete a repository */
    delete: operations["deleteRepository"];
    /**
     * Partial Update Repository 
     * @description Partially Update a repository
     */
    patch: operations["partialUpdateRepository"];
  };
  "/repositories/{uuid}/introspect/": {
    /** introspect a repository */
    post: operations["introspect"];
  };
  "/repositories/{uuid}/rpms": {
    /**
     * List Repositories RPMs 
     * @description list repositories RPMs
     */
    get: operations["listRepositoriesRpms"];
  };
  "/repository_parameters/": {
    /**
     * List Repository Parameters 
     * @description get repository parameters (Versions and Architectures)
     */
    get: operations["listRepositoryParameters"];
  };
  "/repository_parameters/external_gpg_key": {
    /**
     * Fetch gpgkey from URL 
     * @description Fetch gpgkey from URL
     */
    post: operations["fetchGpgKey"];
  };
  "/repository_parameters/validate/": {
    /**
     * Validate parameters prior to creating a repository 
     * @description Validate parameters prior to creating a repository, including checking if remote yum metadata is present
     */
    post: operations["validateRepositoryParameters"];
  };
  "/rpms/names": {
    /**
     * Search RPMs 
     * @description Search RPMs for a given list of repositories as URLs or UUIDs
     */
    post: operations["searchRpm"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    "api.FetchGPGKeyResponse": {
      /** @description The downloaded GPG Keys from the provided url. */
      gpg_key?: string;
    };
    "api.GenericAttributeValidationResponse": {
      /** @description Error message if the attribute is not valid */
      error?: string;
      /** @description Skipped if the attribute is not passed in for validation */
      skipped?: boolean;
      /** @description Valid if not skipped and the provided attribute is valid */
      valid?: boolean;
    };
    "api.Links": {
      /** @description Path to first page of results */
      first?: string;
      /** @description Path to last page of results */
      last?: string;
      /** @description Path to next page of results */
      next?: string;
      /** @description Path to previous page of results */
      prev?: string;
    };
    "api.PopularRepositoriesCollectionResponse": {
      data?: (components["schemas"]["api.PopularRepositoryResponse"])[];
      links?: components["schemas"]["api.Links"];
      meta?: components["schemas"]["api.ResponseMetadata"];
    };
    "api.PopularRepositoryResponse": {
      /**
       * @description Architecture to restrict client usage to 
       * @example x86_64
       */
      distribution_arch?: string;
      /**
       * @description Versions to restrict client usage to 
       * @example [
       *   "7",
       *   "8"
       * ]
       */
      distribution_versions?: (string)[];
      /** @description Existing reference name for repository */
      existing_name?: string;
      /** @description GPG key for repository */
      gpg_key?: string;
      /** @description Verify packages */
      metadata_verification?: boolean;
      /** @description Suggested name of the popular repository */
      suggested_name?: string;
      /** @description URL of the remote yum repository */
      url?: string;
      /** @description UUID of the repository if it exists for the user */
      uuid?: string;
    };
    "api.RepositoryCollectionResponse": {
      /** @description Requested Data */
      data?: (components["schemas"]["api.RepositoryResponse"])[];
      links?: components["schemas"]["api.Links"];
      meta?: components["schemas"]["api.ResponseMetadata"];
    };
    "api.RepositoryIntrospectRequest": {
      /** @description Reset the failed introspections count */
      reset_count?: boolean;
    };
    "api.RepositoryParameterResponse": {
      /** @description Architectures available for repository creation */
      distribution_arches?: (components["schemas"]["config.DistributionArch"])[];
      /** @description Versions available for repository creation */
      distribution_versions?: (components["schemas"]["config.DistributionVersion"])[];
    };
    "api.RepositoryRequest": {
      /**
       * @description Architecture to restrict client usage to 
       * @example x86_64
       */
      distribution_arch?: string;
      /**
       * @description Versions to restrict client usage to 
       * @example [
       *   "7",
       *   "8"
       * ]
       */
      distribution_versions?: (string)[];
      /** @description GPG key for repository */
      gpg_key?: string;
      /** @description Verify packages */
      metadata_verification?: boolean;
      /** @description Name of the remote yum repository */
      name?: string;
      /** @description URL of the remote yum repository */
      url?: string;
    };
    "api.RepositoryResponse": {
      /** @description Account ID of the owner */
      account_id?: string;
      /**
       * @description Architecture to restrict client usage to 
       * @example x86_64
       */
      distribution_arch?: string;
      /**
       * @description Versions to restrict client usage to 
       * @example [
       *   "7",
       *   "8"
       * ]
       */
      distribution_versions?: (string)[];
      /** @description Number of consecutive failed introspections */
      failed_introspections_count?: number;
      /** @description GPG key for repository */
      gpg_key?: string;
      /** @description Error of last attempted introspection */
      last_introspection_error?: string;
      /** @description Timestamp of last attempted introspection */
      last_introspection_time?: string;
      /** @description Timestamp of last successful introspection */
      last_success_introspection_time?: string;
      /** @description Timestamp of last introspection that had updates */
      last_update_introspection_time?: string;
      /** @description Verify packages */
      metadata_verification?: boolean;
      /** @description Name of the remote yum repository */
      name?: string;
      /** @description Organization ID of the owner */
      org_id?: string;
      /** @description Number of packages last read in the repository */
      package_count?: number;
      /** @description Status of repository introspection (Valid, Invalid, Unavailable, Pending) */
      status?: string;
      /** @description URL of the remote yum repository */
      url?: string;
      /** @description UUID of the object */
      uuid?: string;
    };
    "api.RepositoryRpm": {
      /** @description The Architecture of the rpm */
      arch?: string;
      /** @description The checksum of the rpm */
      checksum?: string;
      /** @description The epoch of the rpm */
      epoch?: number;
      /** @description The rpm package name */
      name?: string;
      /** @description The release of the rpm */
      release?: string;
      /** @description The summary of the rpm */
      summary?: string;
      /** @description Identifier of the rpm */
      uuid?: string;
      /** @description The version of the  rpm */
      version?: string;
    };
    "api.RepositoryRpmCollectionResponse": {
      /** @description List of rpms */
      data?: (components["schemas"]["api.RepositoryRpm"])[];
      links?: components["schemas"]["api.Links"];
      meta?: components["schemas"]["api.ResponseMetadata"];
    };
    "api.RepositoryValidationRequest": {
      /** @description GPGKey of the remote yum repository */
      gpg_key?: string;
      /** @description If set, attempt to validate the yum metadata with the specified GPG Key */
      metadata_verification?: boolean;
      /** @description Name of the remote yum repository */
      name?: string;
      /** @description URL of the remote yum repository */
      url?: string;
      /** @description If set, this is an "Update" validation */
      uuid?: string;
    };
    "api.RepositoryValidationResponse": {
      gpg_key?: components["schemas"]["api.GenericAttributeValidationResponse"];
      name?: components["schemas"]["api.GenericAttributeValidationResponse"];
      url?: components["schemas"]["api.UrlValidationResponse"];
    };
    "api.ResponseMetadata": {
      /** @description Total count of results */
      count?: number;
      /** @description Limit of results used for the request */
      limit?: number;
      /** @description Offset into results used for the request */
      offset?: number;
    };
    "api.SearchRpmRequest": {
      /** @description Maximum number of records to return for the search */
      limit?: number;
      /** @description Search string to search rpm names */
      search?: string;
      /** @description URLs of repositories to search */
      urls?: (string)[];
      /** @description List of RepositoryConfig UUIDs to search */
      uuids?: (string)[];
    };
    "api.SearchRpmResponse": {
      /** @description Package name found */
      package_name?: string;
      /** @description Summary of the package found */
      summary?: string;
    };
    "api.UrlValidationResponse": {
      /** @description Error message if the attribute is not valid */
      error?: string;
      /** @description If the metadata cannot be fetched successfully, the http code that is returned if the http request was completed */
      http_code?: number;
      /** @description True if the metadata can be fetched successfully */
      metadata_present?: boolean;
      /** @description True if a repomd.xml.sig file was found in the repository */
      metadata_signature_present?: boolean;
      /** @description Skipped if the URL is not passed in for validation */
      skipped?: boolean;
      /** @description Valid if not skipped and the provided attribute is valid */
      valid?: boolean;
    };
    "config.DistributionArch": {
      /** @description Static label of the architecture */
      label?: string;
      /** @description Human-readable form of the architecture */
      name?: string;
    };
    "config.DistributionVersion": {
      /** @description Static label of the version */
      label?: string;
      /** @description Human-readable form of the version */
      name?: string;
    };
    "errors.ErrorResponse": {
      errors?: (components["schemas"]["errors.HandlerError"])[];
    };
    "errors.HandlerError": {
      /** @description An explanation specific to the problem */
      detail?: string;
      /** @description HTTP status code applicable to the error */
      status?: number;
      /** @description A summary of the problem */
      title?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * List Popular Repositories 
   * @description Get popular repositories
   */
  listPopularRepositories: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["api.PopularRepositoriesCollectionResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
  /**
   * List Repositories 
   * @description list repositories
   */
  listRepositories: {
    parameters: {
      query?: {
        /** @description Offset into the list of results to return in the response */
        offset?: number;
        /** @description Limit the number of items returned */
        limit?: number;
        /** @description Comma separated list of architecture to optionally filter-on (e.g. 'x86_64,s390x' would return Repositories with x86_64 or s390x only) */
        version?: string;
        /** @description Comma separated list of versions to optionally filter-on  (e.g. '7,8' would return Repositories with versions 7 or 8 only) */
        arch?: string;
        /** @description Filter by compatible arch (e.g. 'x86_64' would return Repositories with the 'x86_64' arch and Repositories where arch is not set) */
        available_for_version?: string;
        /** @description Filter by compatible version (e.g. 7 would return Repositories with the version 7 or where version is not set) */
        available_for_arch?: string;
        /** @description Search term for name and url. */
        search?: string;
        /** @description Filter repositories by name using an exact match */
        name?: string;
        /** @description Filter repositories by name using an exact match */
        url?: string;
        /** @description Sets the sort order of the results */
        sort_by?: string;
        /** @description Comma separated list of statuses to optionally filter on */
        status?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["api.RepositoryCollectionResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Repository 
   * @description create a repository
   */
  createRepository: {
    /** @description request body */
    requestBody: {
      content: {
        "application/json": components["schemas"]["api.RepositoryRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          /** @description resource URL */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["api.RepositoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
  /**
   * Bulk create repositories 
   * @description bulk create repositories
   */
  bulkCreateRepositories: {
    /** @description request body */
    requestBody: {
      content: {
        "application/json": (components["schemas"]["api.RepositoryRequest"])[];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          /** @description resource URL */
          Location?: string;
        };
        content: {
          "application/json": (components["schemas"]["api.RepositoryResponse"])[];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Repository 
   * @description Get information about a Repository
   */
  getRepository: {
    parameters: {
      path: {
        /** @description Identifier of the Repository */
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["api.RepositoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Repository 
   * @description Fully update a repository
   */
  fullUpdateRepository: {
    parameters: {
      path: {
        /** @description Identifier of the Repository */
        uuid: string;
      };
    };
    /** @description request body */
    requestBody: {
      content: {
        "application/json": components["schemas"]["api.RepositoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["api.RepositoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
  /** Delete a repository */
  deleteRepository: {
    parameters: {
      path: {
        /** @description Identifier of the Repository */
        uuid: string;
      };
    };
    responses: {
      /** @description Repository was successfully deleted */
      204: never;
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
  /**
   * Partial Update Repository 
   * @description Partially Update a repository
   */
  partialUpdateRepository: {
    parameters: {
      path: {
        /** @description Identifier of the Repository */
        uuid: string;
      };
    };
    /** @description request body */
    requestBody: {
      content: {
        "application/json": components["schemas"]["api.RepositoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["api.RepositoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
  /** introspect a repository */
  introspect: {
    parameters: {
      path: {
        /** @description Identifier of the Repository */
        uuid: string;
      };
    };
    /** @description request body */
    requestBody?: {
      content: {
        "*/*": components["schemas"]["api.RepositoryIntrospectRequest"];
      };
    };
    responses: {
      /** @description Introspection was successfully queued */
      204: never;
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
  /**
   * List Repositories RPMs 
   * @description list repositories RPMs
   */
  listRepositoriesRpms: {
    parameters: {
      query?: {
        /** @description Limit the number of items returned */
        limit?: number;
        /** @description Offset into the list of results to return in the response */
        offset?: number;
        /** @description Search term for name. */
        search?: string;
        /** @description Sets the sort order of the results. */
        sort_by?: string;
      };
      path: {
        /** @description Identifier of the Repository */
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["api.RepositoryRpmCollectionResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
  /**
   * List Repository Parameters 
   * @description get repository parameters (Versions and Architectures)
   */
  listRepositoryParameters: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["api.RepositoryParameterResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
  /**
   * Fetch gpgkey from URL 
   * @description Fetch gpgkey from URL
   */
  fetchGpgKey: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["api.FetchGPGKeyResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
  /**
   * Validate parameters prior to creating a repository 
   * @description Validate parameters prior to creating a repository, including checking if remote yum metadata is present
   */
  validateRepositoryParameters: {
    /** @description request body */
    requestBody: {
      content: {
        "application/json": (components["schemas"]["api.RepositoryValidationRequest"])[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["api.RepositoryValidationResponse"])[];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
  /**
   * Search RPMs 
   * @description Search RPMs for a given list of repositories as URLs or UUIDs
   */
  searchRpm: {
    /** @description request body */
    requestBody: {
      content: {
        "application/json": components["schemas"]["api.SearchRpmRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["api.SearchRpmResponse"])[];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["errors.ErrorResponse"];
        };
      };
    };
  };
}
